Today: review for final exam 
Wed/Fri: work time / checkoff for milestone 12


////////////////////////////

General announcements:
- NO late work accepted after Friday, May 9 (includes milestones and tutorials)
- Milestone 12 must be checked off in class or office hours (not Canvas)
- Website design competition - submit new release by Friday, May 9
    winner gets gift card to a burger/ice cream place 
    (Dairy Queen? Freddy's? Culver's?)



Tutorial: POST requests and JSON (due today)

Milestone 12 (due Friday, May 9)



/////////////////////////////////

Optional final.
    1:30 section: Tuesday, May 13 11:50 am - 1:40 pm
    2:30 section: Thursday, May 15 4:10-6:00 pm 

Format.
    Paper-based, closed notes, closed computers.
    Multiple choice followed by open-ended.
    Similar format as midterms, but slightly longer


--> be familiar with all vocabulary terms

--> I highly recommend reviewing exams 1 and 2 and their practice exams

/////////////////////////////////////

For open-ended:
- Implementing a class, including fields/properties/methods/constructors  
- Creating and using objects
- Enforcing the bounds of a property - would need private backing field

- Writing and implementing an interface
- Using inheritance and abstract classes

- Drawing and interpreting UML diagrams

- Implementing INotifyPropertyChanged - declaring the event, invoking as needed

- Events, including custom events, custom event arguments, invoking events, 
    attaching event handlers to events, and using events to send messages 
    between objects

- Writing Fact and Theory xUnit tests
    (Equals, True, False, Contains, PropertyChanged)    

- LINQ queries for filtering
    Where, OrderBy, OrderByDescending


--> No questions on XAML, Razor Pages, CSS, HTML


//////////////////////////////////

General review:


Encapsulation --> 

Defining a class -->
    when do we need a constructor?

    when do we need a static constructor?
       

Polymorphism --> 
    many forms
    IceCreamCone - possible types?



Inheritance --> 
    example? 
    why? 
    different names for each class?
    how to implement methods/properties differently?

    how do constructors work?
    rules when extending a class?


    public class Animal {
        private string _name;

        public Animal(string n) {
            _name = n;
        }

        public void Talk {
            Console.WriteLine("words");
        }
    }

    public class Dog: Animal {
        //is this OK?
        public Dog() {}
    }

    //is this OK?
    public class Collie: Dog {

    }


Are these OK?
    Animal a = new Dog(); 
    Dog d = a; 

    Dog c = new Collie();
    c.Talk();




Interfaces - why?


Abstract classes -->
    how different from interfaces?
    
    rules when extending an abstract class?

    public abstract class Example {
        public abstract void DoStuff();
    }

    public class Child : Example {
       //what do we have to do?
    }

    what does an abstract class need to do when implementing an interface?


Events
Data binding
MVVM

Field --> can we override?
Method
Property --> difference from field? types of accessors? 

public
protected --> where visible? 
private
static --> how do we use?

Implicit casting --> when?

Explicit casting --> different ways. When is it needed?


virtual --> places used? behavior?

abstract --> places used? behavior?

override --> when can we say this?

as - what kind of thing is this? 

is - what kind of thing is this? 


enum --> know how to declare, use

/////////////////////////

public interface IInterface {
    void Method1(params);
}

public abstract class AbstractClass {
    public void FinishedMethod() {
        Console.WriteLine("is done");
    }

    public virtual void Method2() {
        Console.WriteLine("parent");
    }

    public abstract void AbstractMethod(params);
}

public class ChildClass : AbstractClass, IInterface {
    public override void AbstractMethod(params) {
        Console.WriteLine("code");
    }

    public override void Method2() {
        Console.WriteLine("child");
    }

    public void Method1(params) {
        Console.WriteLine("done");
    }
}

AbstractClass c = new ChildClass();
c.Method2(); // what happens?


<-- is the word "override" required for AbstractMethod?


ChildClass c = new ChildClass();
c.FinishedMethod(); //can we do this?

//////////////////

Look at UML of student information.

--> assume _students is already initialized

--> complete FilterByStanding

--> HonorRoll (3.5 and up, srs only)

/////////////////

--> see pie UML


Add the appropriate UML associations to the diagram. 
We want to indicate that PaleozoicPie implements INotifyPropertyChanged and IOrderItem.


Write the PaleozoicPie class definition.
- Description should be the filling followed by "Paleozoic Pie." 
- A Paleozoic Pie is $3.00 plus an additional $1 when served with ice cream (a la mode)
- Instructions should include "Hot" if the pie is hot and 
    "A La Mode" if the pie is served a la mode.


--> know how to implement INotifyPropertyChanged for a collection!

(if time, how would it work for PieSampler if it had a TotalPrice property
    that was 75% of total pie price?)