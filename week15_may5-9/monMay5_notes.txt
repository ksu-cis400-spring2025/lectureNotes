Today: review for final exam 
Wed/Fri: work time / checkoff for milestone 12


////////////////////////////

General announcements:
- NO late work accepted after Friday, May 9 (includes milestones and tutorials)
- Milestone 12 must be checked off in class or office hours (not Canvas)
- Website design competition - submit new release by Friday, May 9
    winner gets gift card to a burger/ice cream place 
    (Dairy Queen? Freddy's? Culver's?)



Tutorial: POST requests and JSON (due today)

Milestone 12 (due Friday, May 9)



/////////////////////////////////

Optional final.
    1:30 section: Tuesday, May 13 11:50 am - 1:40 pm
    2:30 section: Thursday, May 15 4:10-6:00 pm 

Format.
    Paper-based, closed notes, closed computers.
    Multiple choice followed by open-ended.
    Similar format as midterms, but slightly longer


--> be familiar with all vocabulary terms

--> I highly recommend reviewing exams 1 and 2 and their practice exams

/////////////////////////////////////

For open-ended:
- Implementing a class, including fields/properties/methods/constructors  
- Creating and using objects
- Enforcing the bounds of a property - would need private backing field

- Writing and implementing an interface
- Using inheritance and abstract classes

- Drawing and interpreting UML diagrams

- Implementing INotifyPropertyChanged - declaring the event, invoking as needed

- Events, including custom events, custom event arguments, invoking events, 
    attaching event handlers to events, and using events to send messages 
    between objects

- Writing Fact and Theory xUnit tests
    (Equals, True, False, Contains, PropertyChanged)    

- LINQ queries for filtering
    Where, OrderBy, OrderByDescending


--> No questions on XAML, Razor Pages, CSS, HTML


//////////////////////////////////

General review:


Encapsulation --> going from a problem statement to class definitions

Defining a class -->
    when do we need a constructor?
        to require that things get initialized when creating an object
        (have params for required info)

    when do we need a static constructor? don't have to
        if you want initializaton work done, put in static constructor
        will run before anything else


       

Polymorphism --> 
    many forms
    IceCreamCone - IMenuItem, IceCream, INotifyPropertyChanged, 
                    object, IceCreamCone



Inheritance --> 
    example? 
        Burger was a parent
        BBQBaconCheeseburger was a child class 
    why? pull out common code to parent, and child can inherit

    different names for each class?
        parent class, base class, super class
        child class, derived class, sub class

    how to implement methods/properties differently?
        parent class: virtual, or abstract (would mean parent class was abstract)
        child class: extend the parent, put "override" on method/property



    how do constructors work?
        highest up ancestor tree constructor code runs first
        ...
        lastly, child constructor code runs

    rules when extending a class?



    public class Animal {
        private string _name;

        public Animal(string n) {
            _name = n;
        }

        public void Talk {
            Console.WriteLine("words");
            Console.WriteLine(_name);
        }
    }

    public class Dog: Animal {
        //is this OK?
        public Dog() : base("Fido") {}
    }

    //is this OK?
    public class Collie: Dog {
       //don't need anything here
       // _name (can't see here)
    }


Are these OK?
    Animal a = new Dog();       //YES! Dogs are Animals
    Dog d = a;                  //NO! Animals aren't necessarily Dogs
                                //would need explicit cast       

    Dog c = new Collie();      //YES! Collies are Dogs 
    c.Talk();                   //YES! Prints "words", "Fido" 




Interfaces - why? list of requirements for the implementing classes


Abstract classes -->
    how different from interfaces?
        interface: can't implement methods/properties,
            can fully implement some (or all) in abstract class
            interface can't have fields
            can implement a lot of interfaces
            can only extend one class (abstract or otherwise)
    
    rules when extending an abstract class?

    public abstract class Example {
        public abstract void DoStuff();
    }

    public class Child : Example {
       //what do we have to do?
    }

    either make Child abstract
    or, override DoStuff

    what does an abstract class need to do when implementing an interface?


Events
Data binding
MVVM - model, view, viewmodel
    viewmodel: have an instance of the model
        has properties that the view can display, or that control display logic
    view has access to the viewmodel (the viewmodel is the DataContext for the view)

Field --> can we override? no (also can't be virtual/abstract)
Method
Property --> difference from field? types of accessors? 
    can be virtual/abstract, can override
    can have different accessors with different visibility
    can have derived properties that don't store anything themselves,
        but whose value comes from others

public
protected --> where visible? 
private
static --> how do we use?

Implicit casting --> when?

    Animal a = new Dog();

Explicit casting --> different ways. When is it needed?

    as, (type), is Dog d

    Dog d = a; <-- NO, needed explicit casting

virtual --> places used? behavior?

abstract --> places used? behavior?

override --> when can we say this?

as - what kind of thing is this? 

is - what kind of thing is this? 


enum --> know how to declare, use

/////////////////////////

public interface IInterface {
    void Method1(params);
}

public abstract class AbstractClass {
    public void FinishedMethod() {
        Console.WriteLine("is done");
    }

    public virtual void Method2() {
        Console.WriteLine("parent");
    }

    public abstract void AbstractMethod(params);
}

public class ChildClass : AbstractClass, IInterface {
    public override void AbstractMethod(params) {
        Console.WriteLine("code");
    }

    public override void Method2() {
        Console.WriteLine("child");
    }

    public void Method1(params) {
        Console.WriteLine("done");
    }
}

AbstractClass c = new ChildClass(); //Fine
c.Method2(); // what happens? prints "child"


<-- is the word "override" required for AbstractMethod?
    no, but would use method2 from parent


ChildClass c = new ChildClass();
c.FinishedMethod(); //can we do this?

//////////////////

Look at UML of student information.

--> assume _students is already initialized

--> complete FilterByStanding

public IEnumerable<Student> FilterByStanding(Standing s) {
    return _students.Where(item => item.CurStanding == s);
}


--> HonorRoll (3.5 and up, srs only)

public IEnumerable<Student> HonorRoll {
    get {
       return FilterByStanding(Standing.Senior).Where(item => item.GPA >- 3.5);
    }
}

/////////////////

--> see pie UML (note: there are a couple of errors in the UML.
    Assume PieSampler has a TotalPrice property, a private backing field for the pie list,
    and that the List<PaleozoicPie> property is named "Pies")


Add the appropriate UML associations to the diagram. 
We want to indicate that PaleozoicPie implements INotifyPropertyChanged and IOrderItem.


Write the PaleozoicPie class definition.
- Description should be the filling followed by "Paleozoic Pie." 
- A Paleozoic Pie is $3.00 plus an additional $1 when served with ice cream (a la mode)
- Instructions should include "Hot" if the pie is hot and 
    "A La Mode" if the pie is served a la mode.


--> know how to implement INotifyPropertyChanged for a collection!

(if time, how would it work for PieSampler if it had a TotalPrice property
    that was 75% of total pie price?)



public class PieSampler : INotifyPropertyChanged {
    private List<PaleozoicPie> _pies = new();

    public List<PaleozoicPie> Pies => _pies;

    public event PropertyChangedEventHandler? PropertyChanged;

    public decimal TotalPrice {
        get {
            decimal sum = 0m;
            foreach (PaleozoicPie p in _pies) {
                sum += p.Price;
            }

            return sum*0.75m;
        }
    }

    private void ItemChanged(object sender, PropertyChangedEventArgs e) {
        if (e.PropertyName == "Price") {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(TotalPrice)));
        }
    } 

    public void AddPie(PaleozoicPie pie) {
        _pies.Add(pie);
        pie.PropertyChanged += ItemChanged;
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(TotalPrice)));
    }


}